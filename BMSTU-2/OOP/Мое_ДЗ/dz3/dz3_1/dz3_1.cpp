
/*!
\mainpage
\brief ДЗ 3.1

Задание 1. Наследование и композиция. Оформление программной документации средствами doxygen

Разработать и реализовать диаграмму классов для описанных объектов предметной области, используя механизмы наследования и композиции. Протестировать все методы. Поля классов должны быть частными (private) или защищенными (protected). Методы не должны содержать операций ввода/вывода, за исключением процедур, единственной задачей которых является вывод информации об объекте на экран. Подготовить документацию средствами doxygen.

Объект – заказное письмо. Поля: адрес отправителя, адрес получателя, вес. Методы: процедура инициализации полей, процедура вывода информации о письме на экран, функция вычисления стоимости отправки письма по России согласно текущим почтовым тарифам.

Объект – ценное письмо. Поля: адрес отправителя, адрес получателя, вес, объявленная ценность письма в рублях. Методы: процедура инициализации полей, процедура вывода информации о письме на экран, функция вычисления доплаты за объявленную ценность и функция вычисления полной стоимости отправки письма по России согласно текущим почтовым тарифам.

Объект – почтовый ящик. Содержит в себе ценные письма. Методы объекта должны позволять: инициализировать объект, выводить на экран содержимое ящика, определять суммарную стоимость писем в ящике.

*/
/*!
\file
\brief ДЗ 3.1

Задание 1. Наследование и композиция. Оформление программной документации средствами doxygen

Разработать и реализовать диаграмму классов для описанных объектов предметной области, используя механизмы наследования и композиции. Протестировать все методы. Поля классов должны быть частными (private) или защищенными (protected). Методы не должны содержать операций ввода/вывода, за исключением процедур, единственной задачей которых является вывод информации об объекте на экран. Подготовить документацию средствами doxygen.

Объект – заказное письмо. Поля: адрес отправителя, адрес получателя, вес. Методы: процедура инициализации полей, процедура вывода информации о письме на экран, функция вычисления стоимости отправки письма по России согласно текущим почтовым тарифам.

Объект – ценное письмо. Поля: адрес отправителя, адрес получателя, вес, объявленная ценность письма в рублях. Методы: процедура инициализации полей, процедура вывода информации о письме на экран, функция вычисления доплаты за объявленную ценность и функция вычисления полной стоимости отправки письма по России согласно текущим почтовым тарифам.

Объект – почтовый ящик. Содержит в себе ценные письма. Методы объекта должны позволять: инициализировать объект, выводить на экран содержимое ящика, определять суммарную стоимость писем в ящике.

*/

#include "iostream"
#include "string"
#include "vector"

using std::string, std::vector, std::cout, std::cin;

/**
 *  \brief Класс, создающий простое письмо
 *
 * Поля: адрес отправителя, адрес получателя, вес. Методы: процедура инициализации полей, процедура вывода информации о письме на экран, функция вычисления стоимости отправки письма по России согласно текущим почтовым тарифам.
 */
class Letter
{
protected:
    string mail1;
    string mail2;
    int weight;

public:
    Letter(string m1, string m2, int w)
    {
        mail1 = m1;
        mail2 = m2;
        weight = w;
    };
    void print()
    {
        /// Процедура которая выводит данные о письме
        cout << "\nОТПРАВЛЕНИЕ\n------------\nИЗ: " << mail1
             << "\nВ: " << mail2 << "\nВЕС: " << weight;
    };

    int cost()
    {
        /// Функция которая возвращает стоимость письма
        return weight * 2.5;
    };
};

/**
 *  \brief Класс, создающий ценное письмо
 *
 * Поля: адрес отправителя, адрес получателя, вес, объявленная ценность письма в рублях. Методы: процедура инициализации полей, процедура вывода информации о письме на экран, функция вычисления доплаты за объявленную ценность и функция вычисления полной стоимости отправки письма по России согласно текущим почтовым тарифам.
 */
class CostlyLetter : public Letter
{
protected:
    int costs;

public:
    CostlyLetter(string m1, string m2, int w, int c) : Letter(m1, m2, w)
    {
        costs = c;
    };

    void print()
    {
        /// \brief Процедура которая выводит данные о ценном письме
        cout << "\nОТПРАВЛЕНИЕ\n------------\nИЗ: " << mail1
             << "\nВ: " << mail2 << "\nВЕС: " << weight
             << "\nЦЕННОСТЬ: " << costs;
    };

    int costAll()
    {
        /// Функция которая возвращает стоимость ценного письма
        return cost() + costs;
    };
};

/**
 *  \brief Класс почтовый ящик, содержит в себе ценные письма
 *
 * Методы объекта должны позволять: инициализировать объект, выводить на экран содержимое ящика, определять суммарную стоимость писем в ящике.
 */
class Mail
{
protected:
    vector<CostlyLetter> letters;

public:
    Mail(vector<CostlyLetter> l)
    {
        letters = l;
    }

    void print()
    {
        /// Процедура которая выводит данные о всех ценных письмах внутри ящика
        for (auto i : letters)
            i.print();
    }

    int cost()
    {
        /// Функция которая возварщает общую стоимость всех ценных писем в ящике
        int res{};
        for (auto i : letters)
            res += i.costAll();
        return res;
    }
};

int main()
{
    /// Тестирующая функция
    Letter ex1("Moscow", "SPB", 100);
    CostlyLetter ex2("SPB", "Moscow", 100, 1000);
    Mail ex3({ex2, ex2, ex2});
    ex1.print();
    cout << "\n"
         << ex1.cost() << "\n";
    ex2.print();
    cout << "\n"
         << ex2.cost() << "\n"
         << ex2.costAll() << "\n";
    ex3.print();
    cout << "\n"
         << ex3.cost() << "\n";
    return 0;
}
